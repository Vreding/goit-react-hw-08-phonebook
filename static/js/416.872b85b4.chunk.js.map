{"version":3,"file":"static/js/416.872b85b4.chunk.js","mappings":"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","sources":["../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selectors.js","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","utilities/firstLetterCaps.js","components/ContactEditor/ContactEditor.styled.jsx","components/ContactEditor/ContactEditor.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Message/Message.styled.jsx","components/Message/Message.jsx","components/Contacts/Contacts.styled.jsx","components/Contacts/Contacts.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/PhoneBoock/PhoneBook.styled.jsx","components/PhoneBoock/PhoneBook.jsx","components/ContactsCounter/ContactsCounter.styled.jsx","components/ContactsCounter/ContactsCounter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter, selectIsLoading],\n  (contacts, filter, isLoading) => {\n    if (isLoading) { return [] };  \n    if (filter) {\n      return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n    };    \n    return contacts;\n  }\n);","import styled from \"@emotion/styled\";\nimport { MdClose } from \"react-icons/md\";\n\nexport const ModalBackdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n  backdrop-filter: blur(3px);\n`;\n\nexport const ModalContent = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  width: 30%;\n  padding: 16px;\n  background-color: rgb(235, 235, 235);;\n  border: 1px solid black;\n  border-radius: 4px;\n  box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n              0 5px 5px rgba(0, 0, 0, 0.25);\n  & > h1 {\n    font-size: 28px;\n    text-align: center;\n  }\n`;\n\nexport const Button = styled.button`\nposition: absolute;\n  top: 8px;\n  right: 8px;\n  display: flex;\n  align-items: center; \n  padding: 0;\n  background-color: transparent;\n  border: none;\n  outline: none;  \n  cursor: pointer;  \n  \n  &:hover > svg {\n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);\n  };\n\n  &:active > svg {\n    background-color: rgb(181, 245, 254);\n  };  \n`;\n\nexport const IconClose = styled(MdClose)`  \n  width: 16px;\n  height: 16px;\n  padding: 4px;\n  border: 1px solid black;\n  border-radius: 50%;\n  background-color: buttonface;\n  transition: box-shadow 250ms linear;\n`;\n\n","import PropTypes from \"prop-types\";\nimport React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Button, IconClose, ModalBackdrop, ModalContent } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst Modal = ({ onClose, children }) => {\n  const handleKeyDown = (event) => {\n    if (event.code === \"Escape\") {      \n      onClose();      \n    };\n  };  \n  \n  const handleBackdropClick = (event) => {\n    if (event.currentTarget === event.target) {\n      onClose();\n    };\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  });\n  \n  return createPortal(\n    <ModalBackdrop onClick={handleBackdropClick}>\n      <ModalContent>\n        <Button onClick={onClose}><IconClose /></Button>\n        {children}\n      </ModalContent>\n    </ModalBackdrop>,\n    modalRoot\n  );\n}\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n}\n\nexport default Modal;","export function firstLetterCaps(string) {\n  let words = string.split(\" \");\n  let result = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let first = word.substring(0, 1).toUpperCase();\n    let leftovers = word.substring(1)\n    result += first + leftovers + \" \";\n  }; \n\n  return result;\n};","import styled from '@emotion/styled';\nimport { Field as FormikField, Form as FormikForm } from 'formik';\nimport { MdEditNote } from \"react-icons/md\";\n\nexport const Form = styled(FormikForm)`\n  display: flex; \n  flex-direction: column;\n  gap: 16px;  \n  padding: 8px;  \n  border: 1px solid black;\n  border-radius: 4px;\n  background-color: rgb(255, 255, 255);  \n  font-size: 20px;\n  font-family: 'Roboto', sans-serif;\n  font-weight: bold;  \n`;\n\nexport const Field = styled(FormikField)`\n  padding: 4px 12px;\n  width: 250px;  \n  border: 1px solid black;\n  border-radius: 12px;\n  transition: box-shadow 250ms linear;\n\n  &::placeholder {\n    text-align: center;\n  };\n\n  &:hover,\n  &:focus {\n    outline: none;    \n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);    \n  };\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;  \n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  margin-left: auto;\n  padding: 4px;  \n  background-color: rgb(255, 255, 255);\n  border: none;\n  outline: none;  \n  font-size: 16px;\n  font-weight: normal;  \n  cursor: pointer;  \n  \n  &:hover > svg {\n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);\n  };\n\n  &:active > svg {    \n    background-color: rgb(181, 245, 254);\n  }\n`;\n\nexport const Icon = styled(MdEditNote)`\n  padding: 4px;\n  border: 1px solid black;\n  border-radius: 50%;\n  background-color: buttonface;\n  fill: rgb(0, 0, 255);\n  width: 16px;\n  height: 16px;\n  transition: box-shadow 250ms linear;\n`;","import PropTypes from \"prop-types\";\nimport { Formik } from 'formik';\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { firstLetterCaps } from 'utilities';\nimport { selectContacts, selectVisibleContacts } from \"redux/contacts/selectors\";\nimport { updateContact } from \"redux/contacts/operations\";\nimport { updateFilter } from \"redux/filter/filterSlice\";\nimport { Button, Field, Form, Icon, Label } from './ContactEditor.styled';\n\nconst ContactEditor = ({ index }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  /////////////\n  const visibleContacts = useSelector(selectVisibleContacts);\n  /////////////\n  const currentContact = visibleContacts[index]; \n  \n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    const isDuplicateName = contacts.find(contact => {\n      if (currentContact.name.toLowerCase() === name.toLowerCase()) return false;\n      return contact.name.toLowerCase() === name.toLowerCase();\n    });\n\n    const isDuplicateNumber = contacts.find(contact => {\n      if (currentContact.number === number) return false;\n      return contact.number === number;\n    });\n        \n    if (isDuplicateNumber || isDuplicateName) {     \n      <>\n        { isDuplicateName && Notify.failure(`${firstLetterCaps(name)} is already in contacts`) };      \n        { isDuplicateNumber && Notify.failure(`${number} is already in contacts`) }; \n      </>\n      return;\n    };\n\n    dispatch(updateContact({ name, number, id: currentContact.id }));\n    dispatch(updateFilter(\"\"));\n    Notify.success( `Contact ${firstLetterCaps(currentContact.name)} successfully changed`);    \n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: currentContact.name,\n        number: currentContact.number,\n      }}\n      onSubmit={handleSubmit}\n    >      \n      <Form>\n        <Label>\n          Edit name\n          <Field id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            autoFocus\n            required\n          />\n        </Label>\n        <Label>\n          Edit phone number\n          <Field\n            id=\"number\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>        \n        <Button type=\"submit\" >\n          Change contact\n          <Icon />\n        </Button>        \n      </Form>      \n    </Formik>\n  );\n};\n\nContactEditor.propTypes = {\n  index: PropTypes.number.isRequired,\n};\n\nexport default ContactEditor;","import styled from \"@emotion/styled\";\nimport { MdDeleteForever, MdEditNote } from \"react-icons/md\";\n\nexport const Contact = styled.li`\n  display: flex;\n  align-items: flex-end;\n  justify-content: space-between;\n  gap: 20px;  \n`;\n\nexport const Text = styled.p`\n  order: -1;\n  flex-grow: 1;  \n  display: flex;\n  align-items: flex-end;\n  gap: 8px;  \n  font-size: 16px;\n  font-family: 'Roboto', sans-serif;  \n  text-transform: capitalize;    \n  transition: color 250ms linear,\n              text-shadow 250ms linear;  \n\n  & > span {\n    font-weight: bold;\n    flex-basis: 50%;\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center; \n  padding: 0;\n  background-color: rgb(255, 255, 255);\n  border: none;\n  outline: none;  \n  cursor: pointer;  \n  \n  &:hover > svg {\n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);\n  };\n\n  &:hover ~ p,\n  &:active ~ p {\n    color: rgb(255, 0, 0);\n    text-shadow: 0 3px 3px rgba(0, 0, 0, 0.25),\n                 0 3px 3px rgba(0, 0, 0, 0.25);\n  };\n\n  &.buttonEdit:hover ~ p,\n  &.buttonEdit:active ~ p {\n    color: rgb(0, 0, 255);       \n  };\n\n  &:active > svg {\n    background-color: rgb(181, 245, 254);\n       \n  };\n\n  &:active + p {\n    text-decoration: line-through;\n  };\n`;\n\nexport const IconEdit = styled(MdEditNote)`\n  fill: ${props => props.edit ? 'rgb(0, 0, 255)' : 'rgb(255, 0, 0)'};\n  width: 16px;\n  height: 16px;\n  padding: 4px;\n  border: 1px solid black;\n  border-radius: 50%;\n  background-color: buttonface;\n  transition: box-shadow 250ms linear;\n`;\n\nexport const IconDelete = IconEdit.withComponent(MdDeleteForever)","import PropTypes from \"prop-types\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"redux/contacts/operations\";\nimport { updateFilter } from \"redux/filter/filterSlice\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport Modal from \"components/Modal\";\nimport ContactEditor from \"components/ContactEditor\";\nimport { firstLetterCaps } from \"utilities\";\n\nimport { Button, Contact, IconDelete, IconEdit, Text } from \"./ContactItem.styled\";\n\nconst ContactItem = ({ id, name, number, index }) => {  \n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n    dispatch(updateFilter(\"\"));\n    Notify.info(`${firstLetterCaps(name)} successfully removed from contacts`);\n  };\n\n  const toggleModal = () => setIsModalOpen(!isModalOpen);\n\n  return (\n    <Contact key={id}>\n      <Button className=\"buttonEdit\" type=\"button\" onClick={toggleModal}>\n        <IconEdit edit=\"true\" />\n      </Button>\n      <Button type=\"button\" onClick={handleDelete}>\n        <IconDelete />\n      </Button>\n      <Text><span>{name}:</span>{number}</Text>\n      {isModalOpen && (        \n        <Modal onClose={toggleModal}>\n          <h1>Contact editor</h1>\n          <ContactEditor index={index} />\n        </Modal>\n      )}\n    </Contact>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n};\n\nexport default ContactItem;","import styled from \"@emotion/styled\";\n\nexport const Contacts = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`","import { useSelector } from \"react-redux\";\nimport { selectVisibleContacts } from \"redux/contacts/selectors\";\nimport ContactItem from \"components/ContactItem\";\n\nimport { Contacts } from \"./ContactList.styled\";\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n \n  return (\n    <Contacts>\n      {visibleContacts.map(({ id, name, number }, index) => (\n        <ContactItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          index={index}\n        />\n      ))}\n    </Contacts>\n  );\n};\n\nexport default ContactList;","import styled from \"@emotion/styled\";\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 8px;\n  padding: 8px;\n  border: 1px solid black;\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: bold;\n  font-family: 'Roboto', sans-serif;  \n`;\n\nexport const Field = styled.input`\n  padding: 4px 12px;\n  width: 250px;  \n  border: 1px solid black;\n  border-radius: 12px;\n  transition: box-shadow 250ms linear;\n\n  &::placeholder {\n    text-align: center;\n  }\n\n  &:hover,\n  &:focus {\n    outline: none;    \n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);    \n  };\n`;","import { useDispatch, useSelector } from \"react-redux\";\nimport { updateFilter } from \"redux/filter/filterSlice\";\nimport { Field, Label } from \"./Filter.styled\";\nimport { useEffect, useRef } from \"react\";\nimport { selectContacts } from \"redux/contacts/selectors\";\n\nconst Filter = () => {  \n  const dispatch = useDispatch();\n    \n  const handleChange = (event) => {\n    dispatch(updateFilter(event.target.value));\n  };\n\n  const refFilter = useRef();\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    refFilter.current.value = \"\"\n  }, [contacts]);\n\n  return (\n    <Label>\n      Find contacts by name\n      <Field\n        ref={refFilter}\n        placeholder=\"Please enter a name\"        \n        onChange={handleChange}             \n      />\n    </Label>\n  );\n};\n\nexport default Filter;","import styled from \"@emotion/styled\";\n\nexport const Text = styled.p`\n  text-align: center;\n  font-weight: bold;\n  color: rgb(255, 0, 0);\n`","import PropTypes from \"prop-types\";\nimport { Text } from \"./Message.styled\";\n\nconst Message = ({ message }) => <Text>{message}</Text>;\n\nMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Message;","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n  display: flex; \n  flex-direction: column;\n  gap: 8px;  \n  padding: 8px;  \n  border: 1px solid black;\n  border-radius: 4px;\n  background-color: white;\n`;\n\nexport const Title = styled.h2`\n  font-size: 24px;\n  text-align: center;\n`;","import PropTypes from \"prop-types\";\nimport { Wrapper, Title } from \"./Contacts.styled\";\n\nconst Contacts = ({ children }) => {\n  return (\n    <Wrapper>\n      <Title>Contacts</Title>\n      {children}\n    </Wrapper>\n  );\n};\n\nContacts.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default Contacts;","import styled from '@emotion/styled';\nimport { Field as FormikField, Form as FormikForm } from 'formik';\nimport { MdAdd } from \"react-icons/md\";\n\nexport const Form = styled(FormikForm)`\n  display: flex; \n  flex-direction: column;\n  gap: 16px;  \n  padding: 8px;  \n  border: 1px solid black;\n  border-radius: 4px;\n  background-color: white;  \n  font-size: 20px;\n  font-family: 'Roboto', sans-serif;\n  font-weight: bold;  \n`;\n\nexport const Field = styled(FormikField)`\n  padding: 4px 12px;\n  width: 250px;  \n  border: 1px solid black;\n  border-radius: 12px;\n  transition: box-shadow 250ms linear;\n\n  &::placeholder {\n    text-align: center;\n  }\n\n  &:hover,\n  &:focus {\n    outline: none;    \n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);    \n  };\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;  \n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  margin-left: auto;\n  padding: 4px;  \n  background-color: white;\n  border: none;\n  outline: none;  \n  font-size: 16px;\n  font-weight: normal;  \n  cursor: pointer; \n  \n  \n  &:hover > svg{\n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);\n  };\n\n  &:active > svg {\n    background-color: rgb(181, 245, 254);\n  }\n`;\n\nexport const Icon = styled(MdAdd)`\n  padding: 4px;\n  border: 1px solid black;\n  border-radius: 50%;\n  background-color: buttonface;\n  fill: blue;\n  width: 16px;\n  height: 16px;\n  transition: box-shadow 250ms linear;\n`;","import { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { selectContacts } from \"redux/contacts/selectors\";\nimport { addContact } from \"redux/contacts/operations\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Formik } from 'formik';\n\nimport { Button, Field, Form, Icon, Label } from './ContactForm.styled';\nimport { firstLetterCaps } from \"utilities\";\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);  \n\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    const isDuplicateName = contacts.find(contact => {\n      if (contact.name.toLowerCase() === name.toLowerCase()) return true;\n      return false\n    });\n    \n    const isDuplicateNumber = contacts.find(contact => {\n      if (contact.number === number) return true;\n      return false;\n    });\n    \n    if (isDuplicateNumber || isDuplicateName) {     \n      <>\n        { isDuplicateName && Notify.failure(`${firstLetterCaps(name)} is already in contacts`) };      \n        { isDuplicateNumber && Notify.failure(`Phone number ${number} is already in your phone book`) };\n      </>            \n      // resetForm();\n      return; \n    };\n\n    dispatch(addContact({name, number}));\n    Notify.success(`${firstLetterCaps(name)} successfully added to contact list`);    \n    resetForm();\n  }; \n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <Label>\n          Name\n          <Field id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Please enter a name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required>\n          </Field>\n        </Label>\n\n        <Label>\n          Phone number\n          <Field\n            id=\"number\"\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Please enter a phone number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n        \n        <Button type=\"submit\">\n          Add new contact\n          <Icon />\n        </Button>\n        \n        \n      </Form>\n    </Formik>\n  );\n};\n\n\n\nexport default ContactForm;","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  width: 30%;  \n  padding: 16px;\n  border: 1px solid black;\n  border-radius: 4px;\n  text-align: start;\n  background-color: #ebebeb;\n  box-shadow: 0 10px 10px rgba(0, 0, 0, 0.25),\n              0 10px 10px rgba(0, 0, 0, 0.25);\n`;\n\nexport const Title = styled.h1`\n  font-size: 28px;\n  text-align: center;\n`;","import PropTypes from \"prop-types\";\nimport { Title, Wrapper } from \"./PhoneBook.styled\";\n\nconst PhoneBook = ({ children }) => {\n  return (\n    <Wrapper>\n      <Title>Phone Boock</Title>\n      {children}\n    </Wrapper>\n  );\n};\n\nPhoneBook.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default PhoneBook;","import styled from \"@emotion/styled\";\n\nexport const Counter = styled.p`\n  text-align: end;\n  font-weight: bold;\n`","import { useSelector } from \"react-redux\";\nimport { selectContacts, selectVisibleContacts } from \"redux/contacts/selectors\";\nimport { Counter } from \"./ContactsCounter.styled\";\n\n\nexport const ContactsCounter = () => {\n\nconst countTotalContacts = useSelector(selectContacts).length;\nconst countVisibleContacts = useSelector(selectVisibleContacts).length;\n\n  return (    \n    <Counter>\n      {countTotalContacts === countVisibleContacts\n        ? `Total contacts: ${countTotalContacts}`\n        : `Found contacts: ${countVisibleContacts}/${countTotalContacts}`\n      }      \n    </Counter>\n  );\n};\n\n\nexport default ContactsCounter;","import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport {\n  selectIsLoading,\n  selectError,\n  selectVisibleContacts,\n  selectContacts\n} from \"redux/contacts/selectors\";\n\nimport ContactList from \"components/ContactList\";\nimport Filter from \"components/Filter\";\nimport Message from \"components/Message\";\nimport Loader from \"components/Loader\";\nimport Contacts from \"components/Contacts\";\nimport ContactForm from \"components/ContactForm\";\nimport PhoneBook from \"components/PhoneBoock\";\nimport ContactsCounter from \"components/ContactsCounter\";\n\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError); \n  const countVisibleContacts = useSelector(selectVisibleContacts).length;\n  const countContacts = useSelector(selectContacts).length;\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <PhoneBook>\n      <ContactForm />\n      <Contacts>\n        {isLoading && <Loader text={'Loading contacts...'} />}\n        {error && <Message message={error} />}\n        {!isLoading && countContacts > 1 && <Filter />}\n        {!isLoading && countContacts > 0 &&\n          <>\n            <ContactsCounter\n              visibleContacts={countVisibleContacts}\n              tatalContacts={countContacts}\n            />\n            <ContactList />\n          </>\n        }\n        {!isLoading && countContacts === 0 &&\n          <Message message=\"There are no contacts in your phone book\" />\n        }\n      </Contacts>\n    </PhoneBook>\n  );\n};"],"names":["NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","filter","contact","toLowerCase","includes","ModalBackdrop","styled","ModalContent","Button","IconClose","MdClose","modalRoot","document","querySelector","onClose","children","handleKeyDown","event","code","useEffect","window","addEventListener","removeEventListener","createPortal","onClick","currentTarget","target","firstLetterCaps","string","words","split","result","word","substring","toUpperCase","Form","FormikForm","Field","FormikField","Label","Icon","MdEditNote","index","dispatch","useDispatch","useSelector","currentContact","initialValues","number","onSubmit","resetForm","isDuplicateName","isDuplicateNumber","Notify","updateContact","id","updateFilter","type","pattern","title","autoFocus","required","Contact","Text","IconEdit","props","edit","IconDelete","withComponent","MdDeleteForever","useState","isModalOpen","setIsModalOpen","toggleModal","className","deleteContact","Contacts","visibleContacts","refFilter","useRef","current","ref","placeholder","onChange","message","Wrapper","Title","MdAdd","addContact","Counter","countTotalContacts","countVisibleContacts","ContactsPage","countContacts","fetchContacts","Loader","text","tatalContacts"],"sourceRoot":""}