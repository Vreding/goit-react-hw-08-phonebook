{"version":3,"file":"static/js/488.ab478d11.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","utilities/firstLetterCaps.js","components/ContactEditor/ContactEditor.styled.jsx","components/ContactEditor/ContactEditor.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Message/Message.styled.jsx","components/Message/Message.jsx","components/Contacts/Contacts.styled.jsx","components/Contacts/Contacts.jsx","components/PhoneBoock/PhoneBook.styled.jsx","components/PhoneBoock/PhoneBook.jsx","components/ContactsCounter/ContactsCounter.styled.jsx","components/ContactsCounter/ContactsCounter.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter, selectIsLoading],\n  (contacts, filter, isLoading) => {\n    if (isLoading) { return [] };  \n    if (filter) {\n      return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n    };    \n    return contacts;\n  }\n);","import styled from \"@emotion/styled\";\nimport { MdClose } from \"react-icons/md\";\n\nexport const ModalBackdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n  backdrop-filter: blur(3px);\n`;\n\nexport const ModalContent = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  width: 30%;\n  padding: 16px;\n  background-color: rgb(235, 235, 235);;\n  border: 1px solid black;\n  border-radius: 4px;\n  box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n              0 5px 5px rgba(0, 0, 0, 0.25);\n  & > h1 {\n    font-size: 28px;\n    text-align: center;\n  }\n`;\n\nexport const Button = styled.button`\nposition: absolute;\n  top: 8px;\n  right: 8px;\n  display: flex;\n  align-items: center; \n  padding: 0;\n  background-color: transparent;\n  border: none;\n  outline: none;  \n  cursor: pointer;  \n  \n  &:hover > svg {\n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);\n  };\n\n  &:active > svg {\n    background-color: rgb(181, 245, 254);\n  };  \n`;\n\nexport const IconClose = styled(MdClose)`  \n  width: 16px;\n  height: 16px;\n  padding: 4px;\n  border: 1px solid black;\n  border-radius: 50%;\n  background-color: buttonface;\n  transition: box-shadow 250ms linear;\n`;\n\n","import PropTypes from \"prop-types\";\nimport React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Button, IconClose, ModalBackdrop, ModalContent } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst Modal = ({ onClose, children }) => {\n  const handleKeyDown = (event) => {\n    if (event.code === \"Escape\") {      \n      onClose();      \n    };\n  };  \n  \n  const handleBackdropClick = (event) => {\n    if (event.currentTarget === event.target) {\n      onClose();\n    };\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  });\n  \n  return createPortal(\n    <ModalBackdrop onClick={handleBackdropClick}>\n      <ModalContent>\n        <Button onClick={onClose}><IconClose /></Button>\n        {children}\n      </ModalContent>\n    </ModalBackdrop>,\n    modalRoot\n  );\n}\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n}\n\nexport default Modal;","export function firstLetterCaps(string) {\n  let words = string.split(\" \");\n  let result = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let first = word.substring(0, 1).toUpperCase();\n    let leftovers = word.substring(1)\n    result += first + leftovers + \" \";\n  }; \n\n  return result;\n};","import styled from '@emotion/styled';\nimport { Field as FormikField, Form as FormikForm } from 'formik';\nimport { MdEditNote } from \"react-icons/md\";\n\nexport const Form = styled(FormikForm)`\n  display: flex; \n  flex-direction: column;\n  gap: 16px;  \n  padding: 8px;  \n  border: 1px solid black;\n  border-radius: 4px;\n  background-color: rgb(255, 255, 255);  \n  font-size: 20px;\n  font-family: 'Roboto', sans-serif;\n  font-weight: bold;  \n`;\n\nexport const Field = styled(FormikField)`\n  padding: 4px 12px;\n  width: 250px;  \n  border: 1px solid black;\n  border-radius: 12px;\n  transition: box-shadow 250ms linear;\n\n  &::placeholder {\n    text-align: center;\n  };\n\n  &:hover,\n  &:focus {\n    outline: none;    \n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);    \n  };\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;  \n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  margin-left: auto;\n  padding: 4px;  \n  background-color: rgb(255, 255, 255);\n  border: none;\n  outline: none;  \n  font-size: 16px;\n  font-weight: normal;  \n  cursor: pointer;  \n  \n  &:hover > svg {\n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);\n  };\n\n  &:active > svg {    \n    background-color: rgb(181, 245, 254);\n  }\n`;\n\nexport const Icon = styled(MdEditNote)`\n  padding: 4px;\n  border: 1px solid black;\n  border-radius: 50%;\n  background-color: buttonface;\n  fill: rgb(0, 0, 255);\n  width: 16px;\n  height: 16px;\n  transition: box-shadow 250ms linear;\n`;","import PropTypes from \"prop-types\";\nimport { Formik } from 'formik';\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { firstLetterCaps } from 'utilities';\nimport { selectContacts, selectVisibleContacts } from \"redux/contacts/selectors\";\nimport { updateContact } from \"redux/contacts/operations\";\nimport { updateFilter } from \"redux/filter/filterSlice\";\nimport { Button, Field, Form, Icon, Label } from './ContactEditor.styled';\n\nconst ContactEditor = ({ index }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  /////////////\n  const visibleContacts = useSelector(selectVisibleContacts);\n  /////////////\n  const currentContact = visibleContacts[index]; \n  \n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    const isDuplicateName = contacts.find(contact => {\n      if (currentContact.name.toLowerCase() === name.toLowerCase()) return false;\n      return contact.name.toLowerCase() === name.toLowerCase();\n    });\n\n    const isDuplicateNumber = contacts.find(contact => {\n      if (currentContact.number === number) return false;\n      return contact.number === number;\n    });\n        \n    if (isDuplicateNumber || isDuplicateName) {     \n      <>\n        { isDuplicateName && Notify.failure(`${firstLetterCaps(name)} is already in contacts`) };      \n        { isDuplicateNumber && Notify.failure(`${number} is already in contacts`) }; \n      </>\n      return;\n    };\n\n    dispatch(updateContact({ name, number, id: currentContact.id }));\n    dispatch(updateFilter(\"\"));\n    Notify.success( `Contact ${firstLetterCaps(currentContact.name)} successfully changed`);    \n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: currentContact.name,\n        number: currentContact.number,\n      }}\n      onSubmit={handleSubmit}\n    >      \n      <Form>\n        <Label>\n          Edit name\n          <Field id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            autoFocus\n            required\n          />\n        </Label>\n        <Label>\n          Edit phone number\n          <Field\n            id=\"number\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>        \n        <Button type=\"submit\" >\n          Change contact\n          <Icon />\n        </Button>        \n      </Form>      \n    </Formik>\n  );\n};\n\nContactEditor.propTypes = {\n  index: PropTypes.number.isRequired,\n};\n\nexport default ContactEditor;","import styled from \"@emotion/styled\";\nimport { MdDeleteForever, MdEditNote } from \"react-icons/md\";\n\nexport const Contact = styled.li`\n  display: flex;\n  align-items: flex-end;\n  justify-content: space-between;\n  gap: 20px;  \n`;\n\nexport const Text = styled.p`\n  order: -1;\n  flex-grow: 1;  \n  display: flex;\n  align-items: flex-end;\n  gap: 8px;  \n  font-size: 16px;\n  font-family: 'Roboto', sans-serif;  \n  text-transform: capitalize;    \n  transition: color 250ms linear,\n              text-shadow 250ms linear;  \n\n  & > span {\n    font-weight: bold;\n    flex-basis: 50%;\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center; \n  padding: 0;\n  background-color: rgb(255, 255, 255);\n  border: none;\n  outline: none;  \n  cursor: pointer;  \n  \n  &:hover > svg {\n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);\n  };\n\n  &:hover ~ p,\n  &:active ~ p {\n    color: rgb(255, 0, 0);\n    text-shadow: 0 3px 3px rgba(0, 0, 0, 0.25),\n                 0 3px 3px rgba(0, 0, 0, 0.25);\n  };\n\n  &.buttonEdit:hover ~ p,\n  &.buttonEdit:active ~ p {\n    color: rgb(0, 0, 255);       \n  };\n\n  &:active > svg {\n    background-color: rgb(181, 245, 254);\n       \n  };\n\n  &:active + p {\n    text-decoration: line-through;\n  };\n`;\n\nexport const IconEdit = styled(MdEditNote)`\n  fill: ${props => props.edit ? 'rgb(0, 0, 255)' : 'rgb(255, 0, 0)'};\n  width: 16px;\n  height: 16px;\n  padding: 4px;\n  border: 1px solid black;\n  border-radius: 50%;\n  background-color: buttonface;\n  transition: box-shadow 250ms linear;\n`;\n\nexport const IconDelete = IconEdit.withComponent(MdDeleteForever)","import PropTypes from \"prop-types\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"redux/contacts/operations\";\nimport { updateFilter } from \"redux/filter/filterSlice\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport Modal from \"components/Modal\";\nimport ContactEditor from \"components/ContactEditor\";\nimport { firstLetterCaps } from \"utilities\";\n\nimport { Button, Contact, IconDelete, IconEdit, Text } from \"./ContactItem.styled\";\n\nconst ContactItem = ({ id, name, number, index }) => {  \n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n    dispatch(updateFilter(\"\"));\n    Notify.info(`${firstLetterCaps(name)} successfully removed from contacts`);\n  };\n\n  const toggleModal = () => setIsModalOpen(!isModalOpen);\n\n  return (\n    <Contact key={id}>\n      <Button className=\"buttonEdit\" type=\"button\" onClick={toggleModal}>\n        <IconEdit edit=\"true\" />\n      </Button>\n      <Button type=\"button\" onClick={handleDelete}>\n        <IconDelete />\n      </Button>\n      <Text><span>{name}:</span>{number}</Text>\n      {isModalOpen && (        \n        <Modal onClose={toggleModal}>\n          <h1>Contact editor</h1>\n          <ContactEditor index={index} />\n        </Modal>\n      )}\n    </Contact>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n};\n\nexport default ContactItem;","import styled from \"@emotion/styled\";\n\nexport const Contacts = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`","import { useSelector } from \"react-redux\";\nimport { selectVisibleContacts } from \"redux/contacts/selectors\";\nimport ContactItem from \"components/ContactItem\";\n\nimport { Contacts } from \"./ContactList.styled\";\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n \n  return (\n    <Contacts>\n      {visibleContacts.map(({ id, name, number }, index) => (\n        <ContactItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          index={index}\n        />\n      ))}\n    </Contacts>\n  );\n};\n\nexport default ContactList;","import styled from \"@emotion/styled\";\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 8px;\n  padding: 8px;\n  border: 1px solid black;\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: bold;\n  font-family: 'Roboto', sans-serif;  \n`;\n\nexport const Field = styled.input`\n  padding: 4px 12px;\n  width: 250px;  \n  border: 1px solid black;\n  border-radius: 12px;\n  transition: box-shadow 250ms linear;\n\n  &::placeholder {\n    text-align: center;\n  }\n\n  &:hover,\n  &:focus {\n    outline: none;    \n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);    \n  };\n`;","import { useDispatch, useSelector } from \"react-redux\";\nimport { updateFilter } from \"redux/filter/filterSlice\";\nimport { Field, Label } from \"./Filter.styled\";\nimport { useEffect, useRef } from \"react\";\nimport { selectContacts } from \"redux/contacts/selectors\";\n\nconst Filter = () => {  \n  const dispatch = useDispatch();\n    \n  const handleChange = (event) => {\n    dispatch(updateFilter(event.target.value));\n  };\n\n  const refFilter = useRef();\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    refFilter.current.value = \"\"\n  }, [contacts]);\n\n  return (\n    <Label>\n      Find contacts by name\n      <Field\n        ref={refFilter}\n        placeholder=\"Please enter a name\"        \n        onChange={handleChange}             \n      />\n    </Label>\n  );\n};\n\nexport default Filter;","import styled from \"@emotion/styled\";\n\nexport const Text = styled.p`\n  text-align: center;\n  font-weight: bold;\n  color: rgb(255, 0, 0);\n`","import PropTypes from \"prop-types\";\nimport { Text } from \"./Message.styled\";\n\nconst Message = ({ message }) => <Text>{message}</Text>;\n\nMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Message;","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n  display: flex; \n  flex-direction: column;\n  gap: 8px;  \n  padding: 8px;  \n  border: 1px solid black;\n  border-radius: 4px;\n  background-color: white;\n`;\n\nexport const Title = styled.h2`\n  font-size: 24px;\n  text-align: center;\n`;","import PropTypes from \"prop-types\";\nimport { Wrapper, Title } from \"./Contacts.styled\";\n\nconst Contacts = ({ children }) => {\n  return (\n    <Wrapper>\n      <Title>Contacts</Title>\n      {children}\n    </Wrapper>\n  );\n};\n\nContacts.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default Contacts;","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  width: 30%;  \n  padding: 16px;\n  border: 1px solid black;\n  border-radius: 4px;\n  text-align: start;\n  background-color: #ebebeb;\n  box-shadow: 0 10px 10px rgba(0, 0, 0, 0.25),\n              0 10px 10px rgba(0, 0, 0, 0.25);\n`;\n\nexport const Title = styled.h1`\n  font-size: 28px;\n  text-align: center;\n`;","import PropTypes from \"prop-types\";\nimport { Title, Wrapper } from \"./PhoneBook.styled\";\n\nconst PhoneBook = ({ children }) => {\n  return (\n    <Wrapper>\n      <Title>Phone Boock</Title>\n      {children}\n    </Wrapper>\n  );\n};\n\nPhoneBook.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default PhoneBook;","import styled from \"@emotion/styled\";\n\nexport const Counter = styled.p`\n  text-align: end;\n  font-weight: bold;\n`","import { useSelector } from \"react-redux\";\nimport { selectContacts, selectVisibleContacts } from \"redux/contacts/selectors\";\nimport { Counter } from \"./ContactsCounter.styled\";\n\n\nexport const ContactsCounter = () => {\n\nconst countTotalContacts = useSelector(selectContacts).length;\nconst countVisibleContacts = useSelector(selectVisibleContacts).length;\n\n  return (    \n    <Counter>\n      {countTotalContacts === countVisibleContacts\n        ? `Total contacts: ${countTotalContacts}`\n        : `Found contacts: ${countVisibleContacts}/${countTotalContacts}`\n      }      \n    </Counter>\n  );\n};\n\n\nexport default ContactsCounter;","import styled from '@emotion/styled';\nimport { Field as FormikField, Form as FormikForm } from 'formik';\nimport { MdAdd } from 'react-icons/md';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  padding: 8px;\n  border: 1px solid black;\n  border-radius: 4px;\n  background-color: white;\n  font-size: 20px;\n  font-family: 'Roboto', sans-serif;\n  font-weight: bold;\n`;\n\nexport const Field = styled(FormikField)`\n  padding: 4px 12px;\n  width: 250px;\n  border: 1px solid black;\n  border-radius: 12px;\n  transition: box-shadow 250ms linear;\n\n  &::placeholder {\n    text-align: center;\n  }\n\n  &:hover,\n  &:focus {\n    outline: none;\n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25), 0 5px 5px rgba(0, 0, 0, 0.25);\n  }\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  margin-left: auto;\n  padding: 4px;\n  background-color: white;\n  border: none;\n  outline: none;\n  font-size: 16px;\n  font-weight: normal;\n  cursor: pointer;\n\n  &:hover > svg {\n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25), 0 5px 5px rgba(0, 0, 0, 0.25);\n  }\n\n  &:active > svg {\n    background-color: rgb(181, 245, 254);\n  }\n`;\n\nexport const Icon = styled(MdAdd)`\n  padding: 4px;\n  border: 1px solid black;\n  border-radius: 50%;\n  background-color: buttonface;\n  fill: blue;\n  width: 16px;\n  height: 16px;\n  transition: box-shadow 250ms linear;\n`;\n\nexport const Error = styled.div`\n  color: red;\n  font-size: 12px;\n  margin-top: 4px;\n  position: absolute;\n  bottom: -16px;\n  right: 0;\n`;\n","import { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nimport { Button, Field, Form, Icon, Label, Error } from './ContactForm.styled';\nimport { firstLetterCaps } from 'utilities';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    const isDuplicateName = contacts.find(contact => {\n      if (contact.name.toLowerCase() === name.toLowerCase()) return true;\n      return false;\n    });\n\n    const isDuplicateNumber = contacts.find(contact => {\n      if (contact.number === number) return true;\n      return false;\n    });\n\n    if (isDuplicateNumber || isDuplicateName) {\n      <>\n        {isDuplicateName &&\n          Notify.failure(`${firstLetterCaps(name)} is already in contacts`)}\n        ;\n        {isDuplicateNumber &&\n          Notify.failure(\n            `Phone number ${number} is already in your phone book`\n          )}\n        ;\n      </>;\n      resetForm();\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    Notify.success(\n      `${firstLetterCaps(name)} successfully added to contact list`\n    );\n    resetForm();\n  };\n\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().required('Name is required'),\n    number: Yup.string().required('Phone number is required'),\n  });\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ errors, touched }) => (\n        <Form>\n          <Label>\n            Name\n            <Field\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Please enter a name\"\n              className={errors.name && touched.name ? 'error' : ''}\n            />\n            {errors.name && touched.name ? <Error>{errors.name}</Error> : null}\n          </Label>\n\n          <Label>\n            Phone number\n            <Field\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"Please enter a phone number\"\n              className={errors.number && touched.number ? 'error' : ''}\n            />\n            {errors.number && touched.number ? (\n              <Error>{errors.number}</Error>\n            ) : null}\n          </Label>\n\n          <Button type=\"submit\">\n            Add new contact\n            <Icon />\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectIsLoading,\n  selectError,\n  selectVisibleContacts,\n  selectContacts,\n} from 'redux/contacts/selectors';\n\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport Message from 'components/Message';\nimport Loader from 'components/Loader';\nimport Contacts from 'components/Contacts';\n// import ContactForm from \"components/ContactForm\";\nimport PhoneBook from 'components/PhoneBoock';\nimport ContactsCounter from 'components/ContactsCounter';\nimport ContactForm from 'components/ContactForm/ContactForm';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const countVisibleContacts = useSelector(selectVisibleContacts).length;\n  const countContacts = useSelector(selectContacts).length;\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <PhoneBook>\n      <ContactForm />\n      <Contacts>\n        {isLoading && <Loader text={'Loading contacts...'} />}\n        {error && <Message message={error} />}\n        {!isLoading && countContacts > 1 && <Filter />}\n        {!isLoading && countContacts > 0 && (\n          <>\n            <ContactsCounter\n              visibleContacts={countVisibleContacts}\n              tatalContacts={countContacts}\n            />\n            <ContactList />\n          </>\n        )}\n        {!isLoading && countContacts === 0 && (\n          <Message message=\"There are no contacts in your phone book\" />\n        )}\n      </Contacts>\n    </PhoneBook>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","ModalBackdrop","styled","ModalContent","Button","IconClose","MdClose","modalRoot","document","querySelector","onClose","children","handleKeyDown","event","code","useEffect","window","addEventListener","removeEventListener","createPortal","onClick","currentTarget","target","firstLetterCaps","string","words","split","result","i","length","word","substring","toUpperCase","Form","FormikForm","Field","FormikField","Label","Icon","MdEditNote","index","dispatch","useDispatch","useSelector","currentContact","initialValues","number","onSubmit","resetForm","isDuplicateName","find","isDuplicateNumber","Notify","updateContact","id","updateFilter","type","pattern","title","autoFocus","required","Contact","Text","IconEdit","props","edit","IconDelete","withComponent","MdDeleteForever","useState","isModalOpen","setIsModalOpen","toggleModal","className","deleteContact","Contacts","visibleContacts","map","refFilter","useRef","current","value","ref","placeholder","onChange","message","Wrapper","Title","Counter","countTotalContacts","countVisibleContacts","MdAdd","Error","validationSchema","Yup","shape","addContact","errors","touched","ContactsPage","countContacts","fetchContacts","Loader","text","tatalContacts"],"sourceRoot":""}